### Generated by Eclipse Vorto OpenAPI Generator from Model 'vorto.private.local.com.bosch.sh:SmartPlug:1.0.0'
openapi: 3.0.0
info:
  title: Bosch Smart Home Local API for Main Resources
  description: |- 
    This description focuses on the JSON-based, REST-like API for the Main Resources (devices, rooms, scenarios, automations, messages). To get a detailed description of the related services and states of a device, select one in the 'Select a definition' drop-down box (top right corner).
    
    By using this documentation, the developer accepts and agrees to be bound by our [Terms and Conditions](https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions).
    
    This documentation is subject to the [Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License](https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode).
    
    Please report any issues you encounter with this documentation in our [GitHub tracker](https://github.com/BoschSmartHome/bosch-shc-api-docs/issues).
  version: "3.6"
servers:
  - url: https://{shcIp}:8444/smarthome
    description: "Bosch Smart Home Controller URL"
    variables:    
      shcIp:
        default: 192.168.0.10
tags:
  - name: Devices
  - name: Rooms
  - name: Scenarios
  - name: Automations
  - name: Messages
  - name: Doors/Windows
  - name: UserDefinedStates
    
paths:
  ###
  ### Devices
  ###
  '/devices':
    get:
      summary: List all available Devices.
      description: Returns all Devices paired with the Smart Home Controller.
      tags:
      - Devices
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        '404':
          description: The entity could not be found.
  '/devices/{deviceId}':
    get:
      summary: Retrieve a specific Device
      description: |-
          Returns the Device identified by the `deviceId` path parameter. The
          response includes details about the Device.
      tags:
      - Devices
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      - $ref: '#/components/parameters/deviceIdPathParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          description: |-
            The entity could not be found. One of the defined path parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
  ###
  ### Rooms
  ###
  '/rooms':
    get:
      summary: List all available Rooms.
      description: Returns all Rooms.
      tags:
      - Rooms
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '404':
          description: The entity could not be found. 
  '/rooms/{roomId}':
    get:
      summary: Retrieve a specific Room.
      description: |-
          Returns the Room identified by the `roomId` path parameter. The
          response includes details about the Room.
      tags:
      - Rooms
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      - $ref: '#/components/parameters/roomIdPathParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: |-
            The entity could not be found. One of the defined path parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
  ###
  ### Scenarios
  ###
  '/scenarios':
    get:
      summary: List all available Scenarios.
      description: Returns all Scenarios.
      tags:
      - Scenarios
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scenario'
        '404':
          description: The entity could not be found. 
  '/scenarios/{scenarioId}':
    get:
      summary: Retrieve a specific Scenario.
      description: |-
          Returns the Scenario identified by the `scenarioId` path parameter. The
          response includes details about the Scenario.
      tags:
      - Scenarios
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      - $ref: '#/components/parameters/scenarioIdPathParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
        '404':
          description: |-
            The entity could not be found. One of the defined path parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

  '/scenarios/{scenarioId}/triggers':
    post:
      summary: Triggers the scenario.
      description: |-
        Triggers the scenario identified by the 'scenarioId' path parameter.
      tags:
        - Scenarios
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      - $ref: '#/components/parameters/scenarioIdPathParam'
      responses:
        '202':
          description: Accepted request.
        '404':
          description: The entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '405':
          description: The method was not allowed.
  ###
  ### Automations
  ###
  '/automation/rules':
    get:
      summary: List all available Automations.
      description: Returns all Automations.
      tags:
        - Automations
      parameters:
        - $ref: '#/components/parameters/apiVersionHeaderParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Automation'
        '404':
          description: The entity could not be found.
  '/automation/rules/{automationId}':
    get:
      summary: Retrieve a specific Automation.
      description: |-
        Returns the Automation identified by the `automationId` path parameter. The
        response includes details about the Automation.
      tags:
        - Automations
      parameters:
        - $ref: '#/components/parameters/apiVersionHeaderParam'
        - $ref: '#/components/parameters/automationIdPathParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Automation'
        '404':
          description: |-
            The entity could not be found. One of the defined path parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'

  '/automation/rules/{automationId}/trigger':
    put:
      summary: Triggers the Automation.
      description: |-
        Triggers the Automation identified by the 'automationId' path parameter, ignoring any conditions being configured.
      tags:
        - Automations
      parameters:
        - $ref: '#/components/parameters/apiVersionHeaderParam'
        - $ref: '#/components/parameters/automationIdPathParam'
      responses:
        '202':
          description: Accepted request.
        '404':
          description: The entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '405':
          description: The method was not allowed.
  ###
  ### Messages
  ###
  '/messages':
    get:
      summary: List all available Messages.
      description: Returns all Messages.
      tags:
      - Messages
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '404':
          description: The entity could not be found.
  ###
  ### Open Doors/Windows
  ###
  '/doors-windows/openwindows':
    get:
      summary: List every open Door and Window
      description: Returns an object of multiple arrays containing available Doors, Windows and their states.
      tags:
      - Doors/Windows
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Windows'
        '404':
          description: The entity could not be found.

  ###
  ### UserDefinedStates
  ###
  '/userdefinedstates':
    get:
      summary: List all available UserDefinedStates
      description: Returns all UserDefinedStates
      tags:
      - UserDefinedStates
      parameters: 
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDefinedState'
  '/userdefinedstates/{userDefinedStateId}':
    get:
      summary: Retrieve a specific UserDefinedState.
      description: |-
          Returns the UserDefinedState identified by the `userDefinedStateId` path parameter. The
          response includes details about the UserDefinedState.
      tags:
      - UserDefinedStates
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      - $ref: '#/components/parameters/userDefinedStateIdPathParam'
      responses:
        '200':
          description: Accepted request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedState'
        '404':
          description: |-
            The entity could not be found. One of the defined path parameters was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
  '/userdefinedstates/{userDefinedStateId}/state':
    get:
      summary: Retrieve the state of a specific UserDefinedState
      description: |-
        Retrieves the state of a UserDefinedState on the controller identified by the `userDefinedStateId` path parameter.
      tags:
        - UserDefinedStates
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      - $ref: '#/components/parameters/userDefinedStateIdPathParam'
      responses:
        '200':
          description: Accepted request.
          content:
            text/plain:
              schema:
                type: string
                example: true
        '404':
          description: The entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
    put:
      summary: Executes the state on the controller
      description: |-
        Executes the state on the controller identified by the `userDefinedStateId` path parameter.
      tags:
        - UserDefinedStates
      parameters:
      - $ref: '#/components/parameters/apiVersionHeaderParam'
      - $ref: '#/components/parameters/userDefinedStateIdPathParam'
      responses:
        '200':
          description: Accepted request.
          content:
            text/plain:
              schema:
                type: string
                example: true
        '404':
          description: The entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedError'
        '405':
          description: The method was not allowed.
                
components:
  schemas:
    AdvancedError:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the Object.
          example: JsonRestExceptionResponseEntity
        errorCode:
          type: string
          description: The error code of the occurred Exception.
          example: ENTITY_NOT_FOUND
        statusCode:
          type: integer
          description: The HTTP status of the error.
          example: 404
    Device:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the Object.
          example: device
        rootDeviceId:
          type: string
          description: "A single fully qualified identifier of the Smart Home Controller."
        id:
          type: string
          description: "A single fully qualified identifier of the Device."
        deviceServiceIds:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
            description: "A single fully qualified identifier a Device's Service."
        manufacturer:
          type: string
          description: The manufacturer of the Device.
        roomId:
          type: string
          description: The id of the corresponding Room.
        deviceModel:
          type: string
          description: The model of the Device.
        serial:
          type: string
          description: The serial of the Device.
        profile:
          type: string
          description: The profile of the Device.
        name:
          type: string
          description: The name of the Device.
        status:
          type: string
          description: Indicates if the Device is available.
          enum: [AVAILABLE,UNAVAILABLE,COMMUNICATION_ERROR,UNDEFINED]
    Room:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the Object.
          example: room
        id:
          type: string
          description: "A single fully qualified identifier of the Room."
        iconId:
          type: string
          description: The id of the corresponding Icon.
        name:
          type: string
          description: The name of the Room.
    Scenario:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the Object.
          example: scenario
        id:
          type: string
          description: "A single fully qualified identifier of the Scenario."
        iconId:
          type: string
          description: The id of the corresponding Icon.
        name:
          type: string
          description: The name of the Scenario.
        actions: 
          type: array
          description: An array of actions defined in this scenario.
          items:
            type: object
    Automation:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the Object.
          example: automation
        id:
          type: string
          description: "A single fully qualified identifier of the Automation."
        name:
          type: string
          description: The name of the Automation.
        enabled:
          type: boolean
          description: Indicates if the Automation is enabled.
          example: true
        automationTriggers:
          type: array
          description: An array of triggers defined in this Automation.
          items:
            type: object
        automationConditions:
          type: array
          description: An array of conditions defined in this Automation.
          items:
            type: object
        automationActions:
          type: array
          description: An array of actions defined in this Automation.
          items:
            type: object
        conditionLogicalOp:
          type: string
          description: The logical operator of the conditions.
          enum: [AND,OR]
    Message:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the Object.
          example: message
        id:
          type: string
          description: "A single fully qualified identifier of the Message."
        messageCode:
          type: object
          properties:
            name: 
              type: string
              description: The type of the Message.
              example: DEVICE_UNAVAILABLE
            category:
              type: string
              description: The category of the Message.
              example: WARNING
        sourceType:
          type: string
          description: The source of the Message.
          example: DEVICE
        timestamp:
          type: integer
        flags: 
          type: array
          items:
            type: string
        arguments:
          type: object
    Windows:
      type: object
      properties:
        allDoors:
          type: array
          items:
            $ref: '#/components/schemas/Window'
        openDoors:
          type: array
          items:
            $ref: '#/components/schemas/Window'  
        unknownDoors:
          type: array
          items:
            $ref: '#/components/schemas/Window'
        allWindows:
          type: array
          items:
            $ref: '#/components/schemas/Window'
        openWindows:
          type: array
          items:
            $ref: '#/components/schemas/Window'
        unknownWindows:
          type: array
          items:
            $ref: '#/components/schemas/Window'
        allOthers:
          type: array
          items:
            $ref: '#/components/schemas/Window'
        openOthers:
          type: array
          items:
            type: object
        unknownOthers:
          type: array
          items:
            type: object
    Window:
      type: object
      properties:
        identifier:
          type: string
        name:
          type: string     
        roomName:
          type: string
    UserDefinedState:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the Object.
          example: userDefinedState
        id:
          type: string
          description: "A single fully qualified identifier of the UserDefinedState."
        name:
          type: string
          description: The name of the UserDefinedState.
        state: 
          type: boolean
          description: The state of the UserDefinedState.
          example: true

  parameters:
    apiVersionHeaderParam:
      in: header
      name: api-version
      description: The version of the API.
      schema:
        type: string
        example: "1.0"
    deviceIdPathParam:
      name: deviceId
      in: path
      description: "A single fully qualified identifier."
      required: true
      schema:
        type: string
    roomIdPathParam:
      name: roomId
      in: path
      description: "A single fully qualified identifier."
      required: true
      schema:
        type: string 
    scenarioIdPathParam:
      name: scenarioId
      in: path
      description: "A single fully qualified identifier."
      required: true
      schema:
        type: string         
    propertyPathPathParam:
      name: propertyPath
      in: path
      description: The path to the Property.
      required: true
      schema:
        type: string
    userDefinedStateIdPathParam:
      name: userDefinedStateId
      in: path
      description: "A single fully qualified identifier."
      required: true
      schema:
        type: string  
